<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-2.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
       ">


  <bean id="twitterService" class="com.nayidisha.twitter.service.TwitterServiceImpl">
  	<constructor-arg type="java.lang.String" index="0"><value>${twitterUserId}</value></constructor-arg> 
  	<constructor-arg type="java.lang.String" index="1"><value>${twitterPassword}</value></constructor-arg>
  	<constructor-arg type="java.lang.String" index="2"><value>internet.ground.fedex.com</value></constructor-arg> 
  	<constructor-arg type="java.lang.String" index="3"><value>80</value></constructor-arg> 
  	  	
  	<property name="twitterDAO">
		<ref bean="twitterDAO" />
    </property>
	<property name="campaignService">
	    <ref bean="campaignService" />
	</property>     
  </bean>
  
  <bean id="campaignService" class="com.nayidisha.twitter.service.CampaignServiceImpl">  	
  	<property name="campaignDAO">
		<ref bean="campaignDAO" />
    </property>
  </bean>
  
  <bean id="schedulerService" class="com.nayidisha.twitter.service.SchedulerServiceImpl">  	
  	<property name="quartzScheduler">
		<ref bean="quartzScheduler" />
    </property>
	<property name="campaignService">
	    <ref bean="campaignService" />
	</property>    
  </bean>
  	
	<bean id="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">
		<property name="dataSource">
			<ref bean="myDataSource"/>
		</property>
		<property name="autoStartup"><value>true</value></property>
		<property name="applicationContextSchedulerContextKey"><value>applicationContext</value></property>
		<property name="waitForJobsToCompleteOnShutdown"><value>true</value></property>
		<property name="quartzProperties">
			<props>
			<!-- ThreadPool -->
			<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
			<prop key="org.quartz.threadPool.threadCount">2</prop>
			<prop key="org.quartz.threadPool.threadPriority">5</prop>
			<!-- Job store -->
			<prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
			<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
			<prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
			<prop key="org.quartz.jobStore.useProperties">false</prop>
	
			<prop key="org.quartz.jobStore.selectWithLockSQL">SELECT * FROM {0}LOCKS UPDLOCK WHERE LOCK_NAME = ?</prop>
			</props>
		</property>
	</bean>
	
	<!--

    This is not working because these jobs are passed to the Enum (NDJobs) and there I cannot seem to get 
    a Spring managed bean
    <bean id="getTwitterersJob" class="com.nayidisha.twitter.jobs.GetTwitterersJob">  	
  	    <property name="twitterService">
		    <ref bean="twitterService" />
        </property>
    </bean>
  
    <bean id="sendTweetsJob" class="com.nayidisha.twitter.jobs.SendTweetsJob">  	
  	    <property name="twitterService">
		    <ref bean="twitterService" />
        </property>
    </bean>  
  
  -->
  
  
  <bean id="twitterDAO" class="com.nayidisha.twitter.dataaccess.TwitterHibernateDAO">
  </bean>
  <bean id="campaignDAO" class="com.nayidisha.twitter.dataaccess.CampaignHibernateDAO">
    <property name="sessionFactory" ref="mySessionFactory"/>
  </bean>
  <bean id="myTxManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="mySessionFactory"/>
  </bean>

  <aop:config>
    <aop:pointcut id="campaignServiceMethods" expression="execution(* com.nayidisha.twitter.service.CampaignService.*(..))"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="campaignServiceMethods"/>
  </aop:config>

  <tx:advice id="txAdvice" transaction-manager="myTxManager">
    <tx:attributes>
      <tx:method name="add*" propagation="REQUIRED"/>
      <tx:method name="update*" propagation="REQUIRED"/>
      <tx:method name="delete*" propagation="REQUIRED"/>
      <tx:method name="storeTargetTwitterers" propagation="REQUIRED"/>
      <tx:method name="storeTweetsSent" propagation="REQUIRED"/>
      <tx:method name="someOther" propagation="REQUIRES_NEW"/>
      <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
    </tx:attributes>
  </tx:advice>

  <bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" >
    	<value>${db.driver.class}</value>
    </property>
    <property name="url" >
    	<value>jdbc:mysql://localhost:3306/tw</value>
    </property>
    <property name="username" >
    	<value>twuser</value>
    </property>
    <property name="password" >
    	<value>password</value>
    </property>    
  </bean>

    <util:list id="twitterMappingResources">
        	<value>com/nayidisha/twitter/domain/Campaign.hbm.xml</value>
        	<value>com/nayidisha/twitter/domain/User.hbm.xml</value>
        	<value>com/nayidisha/twitter/domain/TATweet.hbm.xml</value>
        	<value>com/nayidisha/twitter/domain/TwitterUser.hbm.xml</value>
        	<value>com/nayidisha/twitter/domain/TweetsSent.hbm.xml</value>
        	<value>com/nayidisha/twitter/domain/Dashboard.hbm.xml</value>
        	<value>com/nayidisha/twitter/domain/TwitterFollower.hbm.xml</value>
	</util:list>
	
	<bean id="mappingResources"
		class="org.springframework.beans.factory.config.ListFactoryBean"
		parent="twitterMappingResources" >
		<property name="sourceList">
			<list merge="true">
			</list>
		</property>
	</bean>	
	

  <bean id="mySessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="dataSource" ref="myDataSource"/>
    <property name="mappingResources">
		<ref bean="mappingResources" />
    </property>
    <property name="hibernateProperties">
      <value>
        hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
        hibernate.show_sql=true
      </value>
    </property>
    <property name="entityInterceptor" ref="auditInterceptor" />
  </bean>



	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:service.properties</value>
				<!--  used for Unit Tests -->
			</list>
		</property>
		<!-- check sys prop first and then those in common.prpoerties -->
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" /> 
		<property name="ignoreResourceNotFound" value="true" />
	</bean>
	<bean id="auditInterceptor" class="com.nayidisha.twitter.interceptor.AuditableInterceptor" />

</beans>